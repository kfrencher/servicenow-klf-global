<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.KLF_TestUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>KLF_TestUtils</name>
        <script><![CDATA[/**
 * This script include provides utility functions for unit testing.
 * 
 * It is intended to be used in conjunction with ATF. There are some general things that you might want to do when writing tests.
 * Like creating a user, creating a group, deleting records created by a user, impersonating a user etc.
 * 
 * It includes functions that allow you to:
 * - Delete records created by a specific user so that you can clean up after a test
 * - Run a function as a specific user so that you can test functionality that requires a specific user
 * - Create a common user that has no roles or groups
 * - Impersonate the common user
 * - Create a group, including adding users to the group
 * - Create a user
 */
//@ts-ignore
var global = global || {};

/**
 * General utility functions for to help with testing using ATF
 */
global.KLF_TestUtils = (function() {
    var glideRecordUtils = new global.KLF_GlideRecordUtils();

    return {

        /**
         * Deletes records from the given tables that the specified
         * user has created. Tables can be specified as a string or an array of strings
         * @param {string} createdBySysId sys_user.sys_id
         * @param {string|string[]} tableNames The names of the tables to delete records from
         */
        deleteRecordsCreatedBy: function(createdBySysId, tableNames) {
            if (typeof tableNames === 'string') {
                tableNames = [tableNames];
            }

            // first i need to transform the createdBySysId sys_user.sys_id
            //into a sys_user.user_name
            var createdBy = new GlideRecord('sys_user');
            if (!createdBy.get(createdBySysId)) {
                throw new Error('Could not find user with sys_id: ' + createdBySysId);
            }
            var createdByUserName = createdBy.getValue('user_name');

            tableNames.forEach(function(tableName) {
                var gr = new GlideRecord(tableName);
                gr.addQuery('sys_created_by', createdByUserName);
                gr.deleteMultiple();
            });
        },

        /**
         * Deletes records from the given tables that the common user
         * has created. Tables can be specified as a string or an array of strings
         * @param {string|string[]} tableNames The names of the tables to delete records from
         */
        deleteRecordsCreatedByCommonUser: function(tableNames) {
            var commonUser = this.getCommonUser();
            if (commonUser === null) {
                throw new Error('Could not find common user');
            }
            this.deleteRecordsCreatedBy(commonUser.getUniqueValue(), tableNames);
        },

        /**
         * Executes the given function as the common user and then reverts back to the original user
         * @param {function} func The function to execute as the given user
         */
        runAsCommonUser: function(func) {
            this.runAsUser(this.createCommonUser().getUniqueValue(), func);
        },

        /**
         * Executes the given function as the given user and then reverts back to the original user
         * @param {string} userSysId The sys_id of the user to impersonate
         * @param {function} func The function to execute as the given user
         */
        runAsUser: function(userSysId, func) {
            var previousUserSysId = this.impersonateUser(userSysId);
            try {
                func();
            } catch ( /** @type {*} */ e) {
                gs.error(e);
            }
            this.impersonateUser(previousUserSysId);
        },

        /**
         * Returns common user sys_user record or null if it does not exist
         * @returns {?GlideRecord} The sys_user record of the common user or null if it does not exist
         */
        getCommonUser: function() {
            var user = new GlideRecord('sys_user');
            if (user.get('user_name', 'common')) {
                return user;
            } else {
                return null;
            }
        },

        /**
         * Creates a user with no roles or groups to simulate a common user
         * @returns {GlideRecord} The newly created sys_user record
         */
        createCommonUser: function() {
            var user = this.createUser('common');
            return user;
        },

        /**
         * Retrieves a user that has admin access
         * @returns {GlideRecord} Some user that has admin access
         */
        getAdminUser: function() {
            var user = new GlideRecord('sys_user');
            if (user.get('user_name', 'admin')) {
                return user;
            } else {
                throw new Error('Could not find admin user');
            }
        },

        /**
         * Impersonates the admin user and returns the GlideRecord of the admin user
         * Returns the sys_id of the current user before impersonation
         * @returns {[GlideRecord, string]} The sys_user record for admin user and the
         * sys_id of the current user before impersonation
         */
        impersonateAdminUser: function() {
            var adminUser = this.getAdminUser();
            var currentUser = this.impersonateUser(adminUser.getUniqueValue());
            return [adminUser, currentUser];
        },

        /**
         * Returns the common user sys_user record or creates it if it does not exist
         * @returns {GlideRecord} The sys_user record of the common user
         */
        getOrCreateCommonUser: function() {
            var user = this.getCommonUser();
            if (user) {
                return user;
            } else {
                return this.createCommonUser();
            }
        },

        /**
         * Impersonates the admin user
         * Returns the GlideRecord of the common user that was impersonated
         * Returns the sys_id of the current user before impersonation
         * @returns {[GlideRecord, string]} The sys_user record for common user and the
         * sys_id of the current user before impersonation
         */
        impersonateCommonUser: function() {
            var commonUser = this.getOrCreateCommonUser();
            var currentUser = this.impersonateUser(commonUser.getUniqueValue());
            return [commonUser, currentUser];
        },

        /**
         * Impersonates the user with the given sys_id
         * @param {string} userSysId The sys_id of the user to impersonate
         * @returns {string} The sys_id of the current user before impersonation
         */
        impersonateUser: function(userSysId) {
            var impersonator = new GlideImpersonate();
            return impersonator.impersonate(userSysId);
        },


        /**
         * Creates a new sys_user_group record
         * @param {string} groupName - The name of the group to create
         * @returns {GlideRecord} - The newly created sys_user_group record
         */
        createGroup: function(groupName) {
            return glideRecordUtils.insertRecord('sys_user_group', {
                name: groupName
            });
        },

        /**
         * Creates a new sys_user record
         * @param {string} userName - The name of the user to create
         */
        createUser: function(userName) {
            return glideRecordUtils.insertRecord('sys_user', {
                user_name: userName,
                first_name: userName + 'first',
                last_name: userName + 'last',
                email: userName + '@example.com'
            });
        },

        /**
         * Adds a user to a group
         * @param {GlideRecord} user - The user to add to the group
         * @param {GlideRecord} group - The group to add the user to
         */
        addUserToGroup: function(user, group) {
            glideRecordUtils.insertRecord('sys_user_grmember', {
                user: user.getUniqueValue(),
                group: group.getUniqueValue()
            });
        }
    };
})();]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-30 00:05:57</sys_created_on>
        <sys_id>82b7058897b86550b2e1f97e6253afa2</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>KLF_TestUtils</sys_name>
        <sys_package display_value="KLF Global" source="fa03e59197682910b2e1f97e6253af92">fa03e59197682910b2e1f97e6253af92</sys_package>
        <sys_policy/>
        <sys_scope display_value="KLF Global">fa03e59197682910b2e1f97e6253af92</sys_scope>
        <sys_update_name>sys_script_include_82b7058897b86550b2e1f97e6253afa2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-03 11:41:07</sys_updated_on>
    </sys_script_include>
</record_update>
